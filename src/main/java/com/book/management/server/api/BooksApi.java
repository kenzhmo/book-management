/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.book.management.server.api;

import com.book.management.server.model.AckResponse;
import com.book.management.server.model.AllBooks;
import com.book.management.server.model.Book;
import com.book.management.server.model.GenericErrorResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;


import javax.validation.Valid;


@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-09-05T05:18:47.070Z[GMT]")
@Validated
public interface BooksApi {

    @Operation(summary = "Add Book", description = "", security = {
        @SecurityRequirement(name = "BasicAuth")    }, tags={ "Book management" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "200 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Book.class))),
        
        @ApiResponse(responseCode = "401", description = "401 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "403 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "500 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorResponse.class))) })
    @RequestMapping(value = "/books",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Book> addBook(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Book body);


    @Operation(summary = "Delete a Book", description = "", security = {
        @SecurityRequirement(name = "BasicAuth")    }, tags={ "Book management" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "200 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AckResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "401 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "403 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "500 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorResponse.class))) })
    @RequestMapping(value = "/books/{bookId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<AckResponse> deleteBook(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("bookId") Integer bookId);


    @Operation(summary = "Get a Book", description = "", security = {
        @SecurityRequirement(name = "BasicAuth")    }, tags={ "Book management" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "200 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Book.class))),
        
        @ApiResponse(responseCode = "401", description = "401 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "403 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "500 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorResponse.class))) })
    @RequestMapping(value = "/books/{bookId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Book> getBook(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("bookId") Integer bookId);


    @Operation(summary = "Get all Books", description = "", security = {
        @SecurityRequirement(name = "BasicAuth")    }, tags={ "Book management" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "200 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AllBooks.class))),
        
        @ApiResponse(responseCode = "401", description = "401 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "403 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "500 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorResponse.class))) })
    @RequestMapping(value = "/books",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<AllBooks> getBooks();


    @Operation(summary = "Modify Book", description = "", security = {
        @SecurityRequirement(name = "BasicAuth")    }, tags={ "Book management" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "200 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Book.class))),
        
        @ApiResponse(responseCode = "401", description = "401 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "403 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "500 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorResponse.class))) })
    @RequestMapping(value = "/books",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Book> modifyBook(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Book body);


    @Operation(summary = "Upload a Book's image", description = "", security = {
        @SecurityRequirement(name = "BasicAuth")    }, tags={ "Book management" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "200 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AckResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "401 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorResponse.class))),
        
        @ApiResponse(responseCode = "403", description = "403 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorResponse.class))),
        
        @ApiResponse(responseCode = "500", description = "500 response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GenericErrorResponse.class))) })
    @RequestMapping(value = "/books/{bookId}/image",
        produces = { "application/json" }, 
        consumes = { "image/png" }, 
        method = RequestMethod.POST)
    ResponseEntity<AckResponse> uploadBookImage(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("bookId") Integer bookId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Object body);

}

